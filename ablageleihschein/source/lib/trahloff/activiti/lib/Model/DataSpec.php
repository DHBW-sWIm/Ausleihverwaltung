<?php
/**
 * DataSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DataSpec Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DataSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'xml_row_number' => 'int',
        'xml_column_number' => 'int',
        'extension_elements' => 'map[string,\Swagger\Client\Model\ExtensionElement[]]',
        'attributes' => 'map[string,\Swagger\Client\Model\ExtensionAttribute[]]',
        'name' => 'string',
        'item_subject_ref' => 'string',
        'collection' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'xml_row_number' => 'int32',
        'xml_column_number' => 'int32',
        'extension_elements' => null,
        'attributes' => null,
        'name' => null,
        'item_subject_ref' => null,
        'collection' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'xml_row_number' => 'xmlRowNumber',
        'xml_column_number' => 'xmlColumnNumber',
        'extension_elements' => 'extensionElements',
        'attributes' => 'attributes',
        'name' => 'name',
        'item_subject_ref' => 'itemSubjectRef',
        'collection' => 'collection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'xml_row_number' => 'setXmlRowNumber',
        'xml_column_number' => 'setXmlColumnNumber',
        'extension_elements' => 'setExtensionElements',
        'attributes' => 'setAttributes',
        'name' => 'setName',
        'item_subject_ref' => 'setItemSubjectRef',
        'collection' => 'setCollection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'xml_row_number' => 'getXmlRowNumber',
        'xml_column_number' => 'getXmlColumnNumber',
        'extension_elements' => 'getExtensionElements',
        'attributes' => 'getAttributes',
        'name' => 'getName',
        'item_subject_ref' => 'getItemSubjectRef',
        'collection' => 'getCollection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['xml_row_number'] = isset($data['xml_row_number']) ? $data['xml_row_number'] : null;
        $this->container['xml_column_number'] = isset($data['xml_column_number']) ? $data['xml_column_number'] : null;
        $this->container['extension_elements'] = isset($data['extension_elements']) ? $data['extension_elements'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['item_subject_ref'] = isset($data['item_subject_ref']) ? $data['item_subject_ref'] : null;
        $this->container['collection'] = isset($data['collection']) ? $data['collection'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
